<registers name="Abstract Commands" skip_index="1" skip_access="1"
        skip_reset="1" prefix="AC_">
    <register name="Access Register">
        \begin{steps}{This command gives the debugger access to CPU registers.
        It performs the following sequence of operations:}
        \item Execute the Program Buffer, if \Fpreexec is set.
        \item Copy data from the register specified by \Fregno into the
	    {\tt arg0} region of {\tt data}, if \Fwrite is clear.
        \item Copy data from the {\tt arg0} region of {\tt data} into the
	    register specified by \Fregno, if \Fwrite is set.
        \item Execute the Program Buffer, if \Fpostexec is set.
        \end{steps}

        If any of these operations fail, \Fcmderr is set and none of the
        remaining steps are executed. An implementation may detect an upcoming
        failure early, and fail the overall command before it reaches the step
        that would cause failure.

        This command must be implemented and support accessing GPRs when the
        hart is halted. Accessing other registers, or accessing registers while
        the hart is running, is optional.

        <field name="cmdtype" bits="31:24">
            This is 0 to indicate Access Register Command.
        </field>
        <field name="0" bits="23:22" />
        <field name="size" bits="21:19">
            2: Access the lowest 32 bits of the register.

            3: Access the lowest 64 bits of the register.

            4: Access the lowest 128 bits of the register.

            If \Fsize specifies a size larger than the register is, then the
            access must fail. If a register is accessible, then \Fsize matching
            the register's actual size must be supported.
        </field>
        <field name="preexec" bits="18">
            When 1, execute the program in the Program Buffer exactly once
            before performing the read/write.
        </field>
        <field name="postexec" bits="17">
            When 1, execute the program in the Program Buffer exactly once
            after performing the read/write.
        </field>
        <field name="write" bits="16">
            0: Copy data from the specified register into {\tt arg0} portion
               of {\tt data}.

            1: Copy data from {\tt arg0} portion of {\tt data} into the
               specified register.
        </field>
        <field name="regno" bits="15:0">
            Number of the register to access, as described in Table~\ref{tab:regno}.
        </field>
    </register>

    <register name="Quick Access">
        \begin{steps}{Perform the following sequence of operations:}
        \item Halt the hart. If the hart is already halted, the entire command
            fails.
        \item Execute the Program Buffer.
        \item Resume the hart. If the hart is already running, the entire
            command fails.
        \end{steps}

        If any of these operations fail, \Fcmderr is set and none of the
        remaining steps are executed. An implementation may detect an upcoming
        failure early, and fail the overall command before it reaches the step
        that would cause failure.

        Implementing this command is optional.

        <field name="cmdtype" bits="31:24">
            This is 1 to indicate Quick Access command.
        </field>
        <field name="0" bits="23:0" />
    </register>

    <register name="Config String Address">
        Copies the start address of the config string into the {\tt arg0}
        region of {\tt data}.

	When system bus mastering is implemented, this command should return the
	address that should be used with the System Bus Access module. Otherwise,
	this command should return the address that should be used to access the
	config string when \Fhartsel=0.

	Implementing this command is optional.

        <field name="cmdtype" bits="31:24">
            This is 2 to indicate Config String Address command.
        </field>
        <field name="0" bits="23:0" />
    </register>
</registers>
